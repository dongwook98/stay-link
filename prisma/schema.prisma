generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String  
  refresh_token      String? @db.Text
  refresh_token_expires_in Int?
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique 
  userId       String   
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model User {
  id    String @id @default(uuid())
  email String? @unique 
  emailVerified Boolean?
  name  String?
  image String?
  desc  String?
  phone String?
  address String?
  rooms Room[]
  accounts      Account[]
  sessions      Session[]
  likes Like[]
}

model Room {
  id Int @id @default(autoincrement())
  title String
  images String[]
  address String
  lat String
  lng String
  category String
  desc String
  price Int
  bedroomDesc String?
  freeCancel Boolean @default(false)
  selfCheckIn Boolean @default(false)
  officeSpace Boolean @default(false)
  hasMountainView Boolean @default(false)
  hasShampoo Boolean @default(false)
  hasFreeLaundry Boolean @default(false)
  hasAirConditioner Boolean @default(false)
  hasWifi Boolean @default(false)
  hasBarBeQue Boolean @default(false)
  hasFreeParking Boolean @default(false)
  createdAt DateTime @default(now())
  likes Like[]
  userId String 
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId String
  roomId Int
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade) 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Faq {
  id Int @id @default(autoincrement())
  title String
  desc String
}